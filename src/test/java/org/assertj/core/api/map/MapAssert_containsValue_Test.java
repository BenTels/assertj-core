/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Copyright 2012-2021 the original author or authors.
 */
package org.assertj.core.api.map;

import org.assertj.core.api.MapAssert;
import org.assertj.core.api.MapAssertBaseTest;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.BDDAssertions.then;
import static org.assertj.core.error.ShouldContainValues.shouldContainValues;
import static org.assertj.core.util.AssertionsUtil.expectAssertionError;
import static org.mockito.Mockito.verify;

import java.util.HashSet;
import java.util.Map;
import java.util.Set;


/**
 * Tests for <code>{@link MapAssert#containsValue(Object)}</code>.
 * 
 * @author Nicolas Fran√ßois
 */
class MapAssert_containsValue_Test extends MapAssertBaseTest {

  @Override
  protected MapAssert<Object, Object> invoke_api_method() {
    return assertions.containsValue("key1");
  }

  @Override
  protected void verify_internal_effects() {
    verify(maps).assertContainsValue(getInfo(assertions), getActual(assertions), "key1");
  }
  
  @ParameterizedTest
  @MethodSource("maps_without_null_keys_or_values")
  protected void should_fail_when_asserting_for_null_on_map_that_does_not_contain_null(final Map<?, ?> actual) {
    Set<String> helper = new HashSet<>();
    helper.add(null);

    // GIVEN
    // actual is a Map that has no null keys
    // WHEN
    AssertionError assertionError = expectAssertionError(() -> assertThat(actual).containsValue(null));
    // THEN
    /*
     * This is not ideal. It feels to me like this should be a call to
     * ShouldContainKey.shouldContainKey(). However, internally the assertion
     * error is generated by ShouldContainKeys -- and that has a different
     * error message.
     */
    then(assertionError).hasMessage(shouldContainValues(actual, helper).create());
  }
  
}
